package model;

import java.util.List;
import java.util.ArrayList;
import com.google.gson.annotations.SerializedName;
import java.util.HashMap;
import java.util.Map;

/**
 * Represents a store that sells products.
 * Contains store details such as name, location, category, rating, and a list of products.
 */
public class Store {
    @SerializedName("StoreName")
    private String storeName;

    @SerializedName("Latitude")
    private double latitude;

    @SerializedName("Longitude")
    private double longitude;

    @SerializedName("FoodCategory")
    private String foodCategory;

    @SerializedName("Stars")
    private int stars;

    @SerializedName("NoOfVotes")
    private int noOfVotes;

    // These fields are calculated or maintained internally.
    private double totalRevenue = 0.0;
    private double averagePrice;

    @SerializedName("AveragePriceSymbol")
    private String averagePriceSymbol;

    @SerializedName("StoreLogo")
    private String storeLogo;

    @SerializedName("Products")
    private List<Product> products;

    @SerializedName("SalesRecord")
    private Map<String, SalesRecordEntry> salesRecord = new HashMap<>();

    // NEW FIELD: used to enforce sequential processing of purchase orders.
    private boolean orderInProgress = false;

    public static class SalesRecordEntry {
        private String productType;
        private int quantity;

        public SalesRecordEntry(String productType, int quantity) {
            this.productType = productType;
            this.quantity = quantity;
        }

        public String getProductType() {
            return productType;
        }

        public int getQuantity() {
            return quantity;
        }

        public void addQuantity(int q) {
            this.quantity += q;
        }
    }

    // Getter for the sales record
    public Map<String, SalesRecordEntry> getSalesRecord() {
        return salesRecord;
    }

    /**
     * Retrieves the aggregated sales quantity for a given product.
     *
     * @param productName The name of the product.
     * @return The total quantity sold for the product; returns 0 if the product is not in the sales record.
     */
    public int getSalesForProduct(String productName) {
        if (salesRecord != null && salesRecord.containsKey(productName)) {
            return salesRecord.get(productName).getQuantity();
        }
        return 0;
    }

    /**
     * Constructs a Store with specified details.
     *
     * @param storeName    The name of the store.
     * @param latitude     The latitude of the store's location.
     * @param longitude    The longitude of the store's location.
     * @param foodCategory The category of food the store specializes in.
     * @param stars        The rating of the store (1-5 stars).
     * @param noOfVotes    The number of votes received.
     * @param totalRevenue The total revenue generated by the store.
     * @param storeLogo    The file path to the store's logo.
     * @param products     A list of products available in the store.
     */
    public Store(String storeName, double latitude, double longitude, String foodCategory,
                 int stars, int noOfVotes, double totalRevenue, String storeLogo, List<Product> products) {
        this.storeName = storeName;
        this.latitude = latitude;
        this.longitude = longitude;
        this.foodCategory = foodCategory;
        this.stars = stars;
        this.noOfVotes = noOfVotes;
        this.totalRevenue = totalRevenue;
        this.storeLogo = storeLogo;
        this.products = products;
        this.setAveragePriceOfStore();
        this.setAveragePriceOfStoreSymbol();
    }

    /**
     * Default constructor for Store.
     * Initializes the product list to prevent null references.
     */
    public Store() {
        this.products = new ArrayList<>();
    }

    // Getters and setters

    public String getStoreName() {
        return storeName;
    }

    public void setStoreName(String storeName) {
        this.storeName = storeName;
    }

    public double getLatitude() {
        return latitude;
    }

    public void setLatitude(double latitude) {
        this.latitude = latitude;
    }

    public double getLongitude() {
        return longitude;
    }

    public void setLongitude(double longitude) {
        this.longitude = longitude;
    }

    public String getFoodCategory() {
        return foodCategory;
    }

    public void setFoodCategory(String foodCategory) {
        this.foodCategory = foodCategory;
    }

    public int getStars() {
        return stars;
    }

    public void setStars(int stars) {
        this.stars = stars;
    }

    public int getNoOfVotes() {
        return noOfVotes;
    }

    public void setNoOfVotes(int noOfVotes) {
        this.noOfVotes = noOfVotes;
    }

    public double getTotalRevenue() {
        return totalRevenue;
    }

    public void setTotalRevenue(double totalRevenue) {
        this.totalRevenue = totalRevenue;
    }

    public String getStoreLogo() {
        return storeLogo;
    }

    public void setStoreLogo(String storeLogo) {
        this.storeLogo = storeLogo;
    }

    public List<Product> getProducts() {
        return products;
    }

    public void setProducts(List<Product> products) {
        this.products = products;
    }

    public String getAveragePriceOfStoreSymbol() {
        return averagePriceSymbol;
    }

    /**
     * Sets the symbol of the store's average price.
     * For example, if averagePrice < 5, symbol is "$", if averagePrice < 15 then "$$", else "$$$".
     */
    public void setAveragePriceOfStoreSymbol() {
        if (products.isEmpty()) {
            averagePriceSymbol = "Not any products in the store";
            return;
        }
        if (averagePrice < 5.0) {
            averagePriceSymbol = "$";
        } else if (averagePrice < 15.0) {
            averagePriceSymbol = "$$";
        } else {
            averagePriceSymbol = "$$$";
        }
    }

    public double getAveragePriceOfStore() {
        return averagePrice;
    }

    /**
     * Sets the average price of the store.
     * This is calculated based on the prices of products.
     */
    public void setAveragePriceOfStore() {
        if (products.isEmpty()) {
            averagePrice = 0.0;
            return;
        }
        double sum = 0.0;
        for (Product product : products) {
            sum += product.getPrice();
        }
        averagePrice = sum / products.size();
    }

    /**
     * Purchases a product from the store.
     * This method is synchronized and uses wait/notify to ensure that concurrent purchase requests
     * are processed sequentially. The first request that acquires the lock is processed, and other threads wait
     * until the order completes. If there is insufficient stock, the request fails.
     *
     * @param productName The name of the product to purchase.
     * @param quantity    The quantity of the product to purchase.
     * @return True if the purchase was successful, false otherwise.
     */
    public synchronized boolean purchaseProduct(String productName, int quantity) {
        // Wait if an order is already in progress.
        while (orderInProgress) {
            try {
                wait();  // Wait for the current order to finish.
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                return false;
            }
        }
        // Mark that an order is in progress.
        orderInProgress = true;
        try {
            for (Product product : products) {
                if (product.getProductName().equals(productName)) {
                    // Check if there's enough stock.
                    if (product.getAvailableAmount() >= quantity) {
                        product.setAvailableAmount(product.getAvailableAmount() - quantity);
                        totalRevenue += quantity * product.getPrice();
                        // Update sales record.
                        if (salesRecord.containsKey(productName)) {
                            salesRecord.get(productName).addQuantity(quantity);
                        } else {
                            salesRecord.put(productName, new SalesRecordEntry(product.getProductType(), quantity));
                        }
                        return true;
                    } else {
                        // Insufficient stock for this order.
                        return false;
                    }
                }
            }
            // Product not found.
            return false;
        } finally {
            // Clear the order flag and notify any waiting threads.
            orderInProgress = false;
            notifyAll();
        }
    }

    /**
     * Adds a product to the store's inventory.
     *
     * @param product The product to be added.
     */
    public void addProduct(Product product) {
        if (this.products == null) {
            this.products = new ArrayList<>();
        }
        this.products.add(product);
    }

    /**
     * Removes a product from the store's inventory based on the product name.
     *
     * @param productName The name of the product to remove.
     * @return True if the product was found and removed, false otherwise.
     */
    public boolean removeProduct(String productName) {
        if (this.products != null) {
            return this.products.removeIf(p -> p.getProductName().equals(productName));
        }
        return false;
    }

    /**
     * Updates the store reviews by recalculating the average rating.
     *
     * @param review The new review (stars) to add.
     */
    public void updateStoreReviews(int review) {
        int reviewSum = this.stars * this.noOfVotes;
        reviewSum += review;
        this.stars = reviewSum / (noOfVotes + 1);
        this.noOfVotes += 1;
    }

    /**
     * Updates the store prices by recalculating the average price and its symbol.
     */
    public void updateStorePrices() {
        setAveragePriceOfStore();
        setAveragePriceOfStoreSymbol();
    }

    /**
     * Returns a string representation of the Store object.
     *
     * @return A string containing store details.
     */
    @Override
    public String toString() {
        return "Store{" +
                "storeName='" + storeName + '\'' +
                ", latitude=" + latitude +
                ", longitude=" + longitude +
                ", foodCategory='" + foodCategory + '\'' +
                ", stars=" + stars +
                ", noOfVotes=" + noOfVotes +
                ", storeLogo='" + storeLogo + '\'' +
                ", products=" + products +
                ", AveragePrices=" + averagePriceSymbol +
                '}';
    }
}

package model;

import java.util.List;
import java.util.ArrayList;
import com.google.gson.annotations.SerializedName;
import java.util.HashMap;
import java.util.Map;

/**
 * Represents a store that sells products.
 * Contains store details such as name, location, category, rating, logo, products, and sales record.
 */
public class Store {
    /** The store's name. */
    @SerializedName("StoreName")
    private String storeName;

    /** The store's latitude coordinate. */
    @SerializedName("Latitude")
    private double latitude;

    /** The store's longitude coordinate. */
    @SerializedName("Longitude")
    private double longitude;

    /** The category of food served by the store. */
    @SerializedName("FoodCategory")
    private String foodCategory;

    /** The store's star rating (1-5). */
    @SerializedName("Stars")
    private int stars;

    /** The number of votes used to calculate the average rating. */
    @SerializedName("NoOfVotes")
    private int noOfVotes;

    /** Total revenue generated by the store. */
    private double totalRevenue = 0.0;

    /** Average price of products in the store. */
    private double averagePrice;

    /** Symbol representing the average price tier (e.g. "$", "$$", "$$$"). */
    @SerializedName("AveragePriceSymbol")
    private String averagePriceSymbol;

    /** File path or URL to the store's logo image. */
    @SerializedName("StoreLogo")
    private String storeLogo;

    /** List of products available in the store. */
    @SerializedName("Products")
    private List<Product> products;

    /** Map of product names to their sales record entries. */
    @SerializedName("SalesRecord")
    private Map<String, SalesRecordEntry> salesRecord = new HashMap<>();

    /** Flag indicating whether a purchase order is currently being processed. */
    private boolean orderInProgress = false;

    /**
     * Nested class representing a sales record entry for a product.
     */
    public static class SalesRecordEntry {
        /** The product type. */
        private String productType;

        /** Quantity sold. */
        private int quantity;

        /**
         * Constructs a SalesRecordEntry with the given product type and quantity.
         *
         * @param productType the type of the product
         * @param quantity    the quantity sold
         */
        public SalesRecordEntry(String productType, int quantity) {
            this.productType = productType;
            this.quantity = quantity;
        }

        /** Returns the product type. */
        public String getProductType() {
            return productType;
        }

        /** Returns the quantity sold. */
        public int getQuantity() {
            return quantity;
        }

        /**
         * Adds to the quantity sold.
         *
         * @param q the amount to add
         */
        public void addQuantity(int q) {
            this.quantity += q;
        }
    }

    /**
     * Returns the sales record map.
     *
     * @return map of product names to sales entries
     */
    public Map<String, SalesRecordEntry> getSalesRecord() {
        return salesRecord;
    }

    /**
     * Retrieves the total quantity sold for a given product.
     *
     * @param productName the name of the product
     * @return total quantity sold, or 0 if not recorded
     */
    public int getSalesForProduct(String productName) {
        if (salesRecord != null && salesRecord.containsKey(productName)) {
            return salesRecord.get(productName).getQuantity();
        }
        return 0;
    }

    /**
     * Constructs a Store with specified details and initializes average price and symbol.
     *
     * @param storeName    the store name
     * @param latitude     the store latitude
     * @param longitude    the store longitude
     * @param foodCategory the food category
     * @param stars        initial star rating
     * @param noOfVotes    initial number of votes
     * @param totalRevenue initial total revenue
     * @param storeLogo    path or URL to the store logo
     * @param products     list of initial products
     */
    public Store(String storeName, double latitude, double longitude, String foodCategory,
                 int stars, int noOfVotes, double totalRevenue, String storeLogo, List<Product> products) {
        this.storeName = storeName;
        this.latitude = latitude;
        this.longitude = longitude;
        this.foodCategory = foodCategory;
        this.stars = stars;
        this.noOfVotes = noOfVotes;
        this.totalRevenue = totalRevenue;
        this.storeLogo = storeLogo;
        this.products = products;
        this.setAveragePriceOfStore();
        this.setAveragePriceOfStoreSymbol();
    }

    /**
     * Default constructor. Initializes the product list to prevent null references.
     */
    public Store() {
        this.products = new ArrayList<>();
    }

    /** Returns the store name. */
    public String getStoreName() {
        return storeName;
    }

    /** Sets the store name. */
    public void setStoreName(String storeName) {
        this.storeName = storeName;
    }

    /** Returns the latitude coordinate. */
    public double getLatitude() {
        return latitude;
    }

    /** Sets the latitude coordinate. */
    public void setLatitude(double latitude) {
        this.latitude = latitude;
    }

    /** Returns the longitude coordinate. */
    public double getLongitude() {
        return longitude;
    }

    /** Sets the longitude coordinate. */
    public void setLongitude(double longitude) {
        this.longitude = longitude;
    }

    /** Returns the food category. */
    public String getFoodCategory() {
        return foodCategory;
    }

    /** Sets the food category. */
    public void setFoodCategory(String foodCategory) {
        this.foodCategory = foodCategory;
    }

    /** Returns the star rating. */
    public int getStars() {
        return stars;
    }

    /** Sets the star rating. */
    public void setStars(int stars) {
        this.stars = stars;
    }

    /** Returns the number of votes. */
    public int getNoOfVotes() {
        return noOfVotes;
    }

    /** Sets the number of votes. */
    public void setNoOfVotes(int noOfVotes) {
        this.noOfVotes = noOfVotes;
    }

    /** Returns the total revenue. */
    public double getTotalRevenue() {
        return totalRevenue;
    }

    /** Sets the total revenue. */
    public void setTotalRevenue(double totalRevenue) {
        this.totalRevenue = totalRevenue;
    }

    /** Returns the store logo path or URL. */
    public String getStoreLogo() {
        return storeLogo;
    }

    /** Sets the store logo path or URL. */
    public void setStoreLogo(String storeLogo) {
        this.storeLogo = storeLogo;
    }

    /** Returns the list of products. */
    public List<Product> getProducts() {
        return products;
    }

    /** Sets the list of products. */
    public void setProducts(List<Product> products) {
        this.products = products;
    }

    /** Returns the average price symbol. */
    public String getAveragePriceOfStoreSymbol() {
        return averagePriceSymbol;
    }

    /**
     * Calculates and sets the symbol for the store's average price.
     * Uses "$", "$$", or "$$$" based on thresholds.
     */
    public void setAveragePriceOfStoreSymbol() {
        if (products.isEmpty()) {
            averagePriceSymbol = "Not any products in the store";
            return;
        }
        if (averagePrice < 5.0) {
            averagePriceSymbol = "$";
        } else if (averagePrice < 15.0) {
            averagePriceSymbol = "$$";
        } else {
            averagePriceSymbol = "$$$";
        }
    }

    /** Returns the average product price. */
    public double getAveragePriceOfStore() {
        return averagePrice;
    }

    /**
     * Calculates and sets the average price of products in the store.
     */
    public void setAveragePriceOfStore() {
        if (products.isEmpty()) {
            averagePrice = 0.0;
            return;
        }
        double sum = 0.0;
        for (Product product : products) {
            sum += product.getPrice();
        }
        averagePrice = sum / products.size();
    }

    /**
     * Attempts to purchase a specified quantity of a product.
     * This method is synchronized to ensure sequential processing of orders.
     *
     * @param productName the name of the product
     * @param quantity    the quantity to purchase
     * @return true if purchase succeeded; false otherwise
     */
    public synchronized boolean purchaseProduct(String productName, int quantity) {
        // Wait if an order is already in progress.
        while (orderInProgress) {
            try {
                wait();  // Wait for the current order to finish.
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                return false;
            }
        }
        // Mark that an order is in progress.
        orderInProgress = true;
        try {
            for (Product product : products) {
                if (product.getProductName().equals(productName)) {
                    // Check if there's enough stock.
                    if (product.getAvailableAmount() >= quantity) {
                        product.setAvailableAmount(product.getAvailableAmount() - quantity);
                        totalRevenue += quantity * product.getPrice();
                        // Update sales record.
                        if (salesRecord.containsKey(productName)) {
                            salesRecord.get(productName).addQuantity(quantity);
                        } else {
                            salesRecord.put(productName, new SalesRecordEntry(product.getProductType(), quantity));
                        }
                        return true;
                    } else {
                        // Insufficient stock for this order.
                        return false;
                    }
                }
            }
            // Product not found.
            return false;
        } finally {
            // Clear the order flag and notify any waiting threads.
            orderInProgress = false;
            notifyAll();
        }
    }

    /**
     * Adds a product to the store's inventory.
     *
     * @param product the product to add
     */
    public void addProduct(Product product) {
        if (this.products == null) {
            this.products = new ArrayList<>();
        }
        this.products.add(product);
    }

    /**
     * Removes a product from the store's inventory by name.
     *
     * @param productName the name of the product to remove
     * @return true if the product was removed; false otherwise
     */
    public boolean removeProduct(String productName) {
        if (this.products != null) {
            return this.products.removeIf(p -> p.getProductName().equals(productName));
        }
        return false;
    }

    /**
     * Updates store rating based on a new review.
     *
     * @param review star rating (1-5) from a customer
     */
    public void updateStoreReviews(int review) {
        int reviewSum = this.stars * this.noOfVotes;
        reviewSum += review;
        this.stars = reviewSum / (noOfVotes + 1);
        this.noOfVotes += 1;
    }

    /** Recalculates average price and its symbol. */
    public void updateStorePrices() {
        setAveragePriceOfStore();
        setAveragePriceOfStoreSymbol();
    }

    /**
     * Returns a string representation of the store.
     *
     * @return string with store details
     */
    @Override
    public String toString() {
        return "Store{" +
                "storeName='" + storeName + '\'' +
                ", latitude=" + latitude +
                ", longitude=" + longitude +
                ", foodCategory='" + foodCategory + '\'' +
                ", stars=" + stars +
                ", noOfVotes=" + noOfVotes +
                ", storeLogo='" + storeLogo + '\'' +
                ", products=" + products +
                ", AveragePrices=" + averagePriceSymbol +
                '}';
    }
}
